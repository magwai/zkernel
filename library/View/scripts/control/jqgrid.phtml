<?php

$c = $this->control()->config;

if ($c->post['nd']) {
	$rows = array();
	if ($c->data && $c->field) {
    	foreach ($c->data as $el) {
    		$cc = array();
    		foreach ($c->field as $k => $el_1) {
    			if (!$el_1->active || $k == '_level' || $k == '_count') continue;
    			$cc[]= htmlspecialchars($el[$k]);
    		}
    		if ($c->tree) {
    			$cc[] = $el->_level;
    			$cc[] = (int)$el->{$c->tree_field};
    			$cc[] = $el->_count ? false : true;
    			$cc[] = false;
    		}
    		$rows[] = array('id' => $el['id'], 'cell' => $cc);
    	}
    }

    $data = array(
    	'page' => $c->pager_page
    		? $c->pager_page
    		: 1,
    	'total' => $c->pager_perpage
    		? ceil($c->data_cnt / $c->pager_perpage)
    		: 1,
    	'records' => $c->data_cnt,
    	'rows' => $rows
    );
	$this->layout()->json = $data;
    $c->response_type = 'json';
}
else {
	$this->placeholder('text')->captureStart();
?>
<div class="c_table">
	<table id="list" class="scroll" cellpadding="0" cellspacing="0"></table>
	<div id="list_pager"></div>
	<div id="filter"></div>
</div>
<?php
	// Схема таблицы для списка и дерева
	$field_title = $field_model = array();
	$is_fmatter = false;
	$is_search = false;
	$reg = Zend_Registry::isRegistered('Zkernel_Multilang') ? Zend_Registry::get('Zkernel_Multilang') : '';

	if ($c->field) foreach ($c->field as $el) {
	    if (!$el->active) continue;
	    $field_title[] = $el->title;
	    $dt = array(
	    	'name' => $el->name
	    );
	    if ($el->align) $dt['align'] = $el->align;
	    if ($el->width) $dt['width'] = $el->width;
	    if ($el->search) {
	    	$is_search = $dt['search'] = true;
	    }
	    else $dt['search'] = false;
	    if ($el->hidden) $dt['hidden'] = true;
	    if ($el->stype) $dt['stype'] = $el->stype;
	    if ($el->editoptions) $dt['editoptions'] = $el->editoptions;
	    if ($el->formatter) {
			if ($el->formatter == 'function') {
				$dt['formatter'] = 'fmt_'.$el->name;
				$formatter_function[] = '$.fn.fmatter.'.$dt['formatter'].' = function(value, options, row, action) { var data = c.formatter(row, $("#list").getGridParam("colModel")); '.$el->formatoptions.' };';
			}
			else {
				$dt['formatter'] = $el->formatter;
				if ($el->formatoptions) $dt['formatoptions'] = $el->formatoptions->toArray();
			}
			if ($dt['formatter']) $is_fmatter = true;
		}
		if ($c->drag) $dt['sortable'] = false;
		elseif (!$el->sortable) $dt['sortable'] = $el->sortable;
	    $field_model[] = $dt;
	}

	$this->placeholder('text')->captureEnd();
	$this->content = $this->placeholder('text');

	echo $this->render('control/inner.phtml');

	$this->inlineScript('script',
'$.include("/zkernel/ctl/jqgrid/css/ui.jqgrid.css|link");
$.include([
	"/zkernel/ctl/jqgrid/i18n/grid.locale-ru.js",
	"/zkernel/ctl/jqgrid/grid.base.js",
	'.($is_search ? '"/zkernel/ctl/jqgrid/grid.custom.js",' : '').'
	'.($c->tree ? '"/zkernel/ctl/jqgrid/grid.treegrid.js",' : '').'
	'.($is_fmatter ? '"/zkernel/js/jquery/jquery.fmatter.js",' : '').'
	"/zkernel/js/jquery/ui/ui.core.js",
	'.($c->drag ? '"/zkernel/ctl/jqgrid/grid.jqueryui.js","/zkernel/js/jquery/ui/ui.sortable.js",' : '').'
	"/zkernel/ctl/jqgrid/grid.zkernel.js"
], function() {
	'.(@$formatter_function ? implode('', $formatter_function) : '').'
	$("#list").jqGrid({
		'.($c->tree
?		'treeGrid: true,
		treeGridModel: "adjacency",
		ExpandColumn: "'.$field_model[0]['name'].'",'
:		''
).'
	   	url: "'.($reg ? '/'.$reg->stitle : '').'/'.$c->controller.'/'.$c->action.'",
	   	mtype: "post",
		datatype: "json",
	   	colNames: '.Zend_Json::encode($field_title).',
	   	colModel: '.Zend_Json::encode($field_model).',
	   	rowNum: '.$c->pager_perpage.',
	   	'.($c->drag ? '' : 'sortname: "'.$c->orderby.'",').'
	   	'.($c->drag ? '' : 'sortorder: "'.$c->orderdir.'",').'
	    viewrecords: true,
	    width: c.table_width(),
	    height: c.table_height(),
	    rownumbers: true,
	    rownumWidth: 40,
	    multiselect: true,
	    multiboxonly: true,
	    loadui: "block",
	    forceFit: true,
	    shrinkToFit: true,
	    altRows: true,
		gridComplete: function() {
			var l = $("#list");'.($c->tree && count($c->tree_opened) ?
			'/*if (l.attr("opened") != 1) l.find("tr[id='.implode('],tr[id=', $c->tree_opened->toArray()).']").each(function() {
				var o = $(this).find(".tree-plus.treeclick");
				if (o.length) {
				 	$("#list")[0].grid.hDiv.loading = false;
					o.click();
				}
			});
			l.attr("opened", 1);*/' : '').'
			l.find("tbody:first").disableSelection();
			l.find(".jqgrow").dblclick(function() {
				$(".c_button:first input[default=1]:first").click();
			});
			'./*$("#list").find("td").attr("unselectable", "on").css({"-moz-user-select":"none","-o-user-select":"none","-khtml-user-select":"none","user-select":"none"});*/'
		},
		'.(!$c->drag && !$c->tree ? 'scroll: true,' : '').'
		prmNames: {page: "_page", rows: "rows", sort: "_orderby", order: "_orderdir", search:"search", nd: "nd"}
	});
	'.($is_search ? '$("#list").jqGrid("filterToolbar");$("#list").setGridHeight(c.table_height());' : '').'
	'.($c->drag ? '$("#list").jqGrid("sortableRows", {
		helper: "clone",
		distance: 2,
		forceHelperSize: true,
		start: function(event, ui) {
			$("#list").resetSelection();
			this._was = ui.item.prev("tr").attr("id");
			this._was = this._was ? this._was : 0;
		},
		beforeStop: function(event, ui) {
			var p = ui.item.get(0);
			var r = ui.item.prev("tr").get(0);
			if ((r && p.parent_id == r.parent_id && $(r).find(".tree-minus").length == 0) || (r && p.parent_id == r.id) || ((!p.parent_id || p.parent_id == 0) && (!r || typeof r == "undefined"))) return true;
			return false;
		},
		stop: function(event, ui) {
			var id = ui.item.attr("id");
			var r = ui.item.prev("tr").get(0);
			var prev = r ? (r.parent_id == ui.item.get(0).parent_id ? r.id : 0) : 0;
			if (prev == this._was) return;
			prev = typeof prev == "undefined" ? 0 : prev;
			c.go(c.cfg.controller, "ctldrag", {"id": id, "prev": prev});
			'.($c->tree ? '$("#list").updateNodeChildren(ui.item.get(0));' : '$("#list").updateRowNum();').'
		}
	});' : '').'
});');

	$c->response_type = 'jqphp';
}